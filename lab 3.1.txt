#include <iostream>

class Parallelogram {
private:
  double base;
  double height;
  double side;
  std::string color;

public:
  Parallelogram() : base(0.0), height(0.0), side(0.0), color("black") {}

  Parallelogram(double b, double h, double s, const std::string &c)
      : base(b), height(h), side(s), color(c) {}

  // Функції для обчислення периметру та площі //
  double calcPerimeter() const { return 2 * (base + side); }

  double calcSquare() const { return base * height; }

  // Функції - setters //
  void setBase(double b) {
    if (b > 0) {
      base = b;
    } else
      throw std::invalid_argument("Основа має бути більшою за 0");
  }

  void setHeight(double h) {
    if (h > 0) {
      height = h;
    } else
      throw std::invalid_argument("Height must be greater than 0");
  }

  void setSide(double s) {
    if (s > 0) {
      side = s;
    } else
      throw std::invalid_argument("Side must be greater than 0");
  }

  void setColor(const std::string &c) { color = c; }

  // Функції - getters //
  double getBase() const { return base; }

  double getHeight() const { return height; }

  double getSide() const { return side; }

  std::string getColor() const { return color; }

  // Функція - print //
  void print() const {
    std::cout << "Parallelogram - Base: " << base << ", Height: " << height
              << ", Side: " << side << ", Color: " << color << std::endl;
  }
};

int main() {
  // Тестування класу Parallelogram //
  Parallelogram pa;
  pa.print();
  Parallelogram p1(5.0, 2.0, 3.0, "white");
  p1.print();

  std::cout << "Площа: " << p1.calcSquare() << std::endl;
  std::cout << "Периметр: " << p1.calcPerimeter() << std::endl;

  // Змінення параметрів та тестування винятків
  try {
    p1.setBase(-1000);
  } catch (const std::invalid_argument &e) {
    std::cerr << "Error: " << e.what() << std::endl;
  }
  p1.setHeight(7.0);
  p1.setSide(5.0);
  p1.setColor("green");

  p1.print();
  std::cout << "Площа: " << p1.calcSquare() << std::endl;
  std::cout << "Периметр: " << p1.calcPerimeter() << std::endl;

  return 0;
}